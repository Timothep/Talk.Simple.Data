Kannt ihr mal raten was diese Stücken Code machen?

/* Erste Stück */
class HttpModule
{
	public HttpModule()
	{
		Get["/"] = parameters => return View("home");

		Post["/user/{id}"] = parameters => 
		{
			SaveSomethingInTheDB(parameters);
			return Response.AsRedirect("/");
		};
	}
}

Wie die Schlüsselwörter "Http", "Get" und "Post" euch verraten, es handelt sich um ein Art Http Framework. Mit ein Tick Fantasie könnte man sogar ahanen dass es sich um eine Klasse

/* Zweite Stück */
var pagedUsaCities = db.city.FindAllByCountryCode("USA")
							.Skip(20).Take(20);

var majorUsCities = db.city.FindAll(db.city.CountryCode == "USA")
						   .Where(db.city.Population > 1000000);

Eine Web-Applikation zu schreiben sollte purer Spaß sein. Ein neues Projekt aufzubauen sollte reibungslos funktionieren ohne Gänsehaut beim Gedanken, verschiedene Frameworks und Tools zusammen zu führen. Die .NET-Welt außerhalb von Microsoft wuchert nicht so wild wie bei anderen Technologien, aber im Open-Source-Universum erscheinen doch ab und zu beeindruckende Projekte: NancyFx und Simple.Data sind zwei davon.

------ http://www.wordle.net/create: ExpressWayFree / RounderEdges / HalfHalf

Simple.Data Simple.Data 
Database Database Database 
SQL 
MongoDB
Query Query Query
Clauses
Transaction
StoredProcedure
MarkRendle
dynamic dynamic dynamic
C#
.NET

FOR THE DEMOS
- Install MongoDB
	- Prepare a shortcut to start the server
	- Check that MONGOVUE works and add a shortcut
	- Add "city, results" as a Watch variable
	- Display the output window

-#################-
--   First demo  --
-#################-

const string conStr = @"Data Source=.\SQLEXPRESS;Initial Catalog=world;Integrated Security=True";
var db = Database.OpenConnection(conStr);

//const string conStr = @"mongodb://localhost:27017/world";
//dynamic db = Database.Opener.OpenMongo(conStr);

var cities = db.city.FindAllByCountryCode("USA").ToList();

foreach(var city in cities)
	Console.WriteLine(city.Name);

-#################-
-- Hands On C_UD --
-#################-

-----INSERT--------
db.city.Insert(Name:"AAA"); //Throws an exception
-------------------
db.city.Insert(ID:42); //Throws an exception
-------------------
db.city.Insert(ID:0);
-------------------
internal class City
{
    public string Name { get; set; }
}
db.city.Insert(new City{Name = "AAA"});
-------------------
internal class City
    {
        public Int32 ID { get; set; }
        public string Name { get; set; }
    }
db.city.Insert(new City{ ID = 42424242, Name = "AAA"});
----UPDATE---------
db.city.UpdateById(Id:42424242, Name:"BBB");
-------------------
var city = db.city.Get(42424242);
city.Name = "CCC";
db.city.Update(city);
----DELETE---------
db.city.DeleteByName("CCC");
-------------------
var city = db.city.Get(0);
db.city.Delete(city);

-#################-
-- Hands On _R__ --
-#################-

var cities = db.city.All(); //Turns no result in debug mode
var cities = db.city.All().ToList();
-------------------
var city = db.city.Get(0); //Look for the TOP1 in the output window#
-------------------
var city = db.city.Find(db.city.Name == "Paris");
var city = db.city.Find(db.city.Name == "Paris" && db.city.CountryCode == "FRA");
-------------------
var cities = db.city.FindAll(db.city.CountryCode == "FRA").ToList();
var cities = db.city.FindAll(db.city.CountryCode == "FRA" && db.city.Population > 1000000).ToList();
-------------------
var cities = db.city.FindAllByCountryCode("FRA").ToList();

-#################-
-- Hands On CAST --
-#################-
City city = db.city.Get(0); //Implicit cast
-------------------
var cities = db.city.FindAllByCountryCode("FRA").ToList(); //Deploy in debugger
IEnumerable<City> cities = db.city.FindAllByCountryCode("FRA").ToList(); // Exception
IEnumerable<City> cities = db.city.FindAllByCountryCode("FRA").ToList<City>(); //Deploy in debugger