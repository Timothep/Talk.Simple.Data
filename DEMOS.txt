FOR THE DEMOS
- Install MongoDB
	- Prepare a shortcut to start the server
	- Check that MONGOVUE works and add a shortcut
	- Add "city, results" as a Watch variable
	- Display the output window

-#################-
--   First demo  --
-#################-

const string conStr = @"Data Source=.\SQLEXPRESS;Initial Catalog=world;Integrated Security=True";
var db = Database.OpenConnection(conStr);

//const string conStr = @"mongodb://localhost:27017/world";
//dynamic db = Database.Opener.OpenMongo(conStr);

var albums = db.album.FindAllByArtistId(1);

foreach (var album in albums)
    Console.WriteLine(album.Title);

-#################-
-- Hands On C_UD --
-#################-

-----INSERT--------
 db.albums.Insert(Title: "AAA"); //GenreId NULL Exception
-------------------
db.albums.Insert(GenreId: 1, ArtistId: 1, Title: "AAA", Price: 9);
-------------------
internal class Album
{
    public Int32 GenreId { get; set; }
}
db.albums.Insert(new Album { GenreId = 1});
-------------------
internal class Album
{
    public Int32 GenreId { get; set; }
    public Int32 ArtistId { get; set; }
    public String Title { get; set; }
    public Int32 Price { get; set; }
}
db.albums.Insert(new Album { GenreId = 1, ArtistId = 1, Title = "AAA", Price = 9});
----UPDATE---------
db.albums.UpdateByAlbumId(AlbumId: 675, Title: "BBB");
-------------------
var album = db.albums.Get(675);
album.Title = "CCC";
db.albums.Update(album);
----DELETE---------
db.albums.DeleteByTitle("CCC");
-------------------
var album = db.Albums.Get(677);
db.Albums.Delete(album);

-#################-
-- Hands On _R__ --
-#################-

var albums = db.Albums.All(); //Show "Children Could not be evaluated" in debug mode
var albums = db.Albums.All().ToList();
-------------------
var album = db.Albums.Get(392); //Look for the TOP1 in the output window
-------------------
var album = db.Albums.Find(db.Albums.Title == "Master Of Puppets");
-------------------
var albums = db.Albums.FindAll(db.Albums.ArtistId == 50).ToList();
-------------------
var albums = db.Albums.FindAllByArtistId(50).ToList();

-#################-
-- Hands On CAST --
-#################-

Album album = db.albums.Get(392); //Works as is
-------------------
var albums = db.albums.FindAllByGenreId(1).ToList(); //Show the necessity to enumerate in the debugger
IList<Album> albums = db.albums.FindAllByGenreId(1).ToList(); // Exception, requires explicit cast
IList<Album> albums = db.albums.FindAllByGenreId(1).ToList<Album>(); //Deploy in debugger

-#################-
-- Hands On LAZY --
-#################-

var lazyArtist = db.Artists.Get(50);
Console.WriteLine("Artist " + lazyArtist.Name);
foreach (var album in lazyArtist.Albums) //Where does Albums come from? Show the second SQL select in the output
    Console.WriteLine("Album " + album.Title);
-------------------
internal class Artist
{
    public Int32 ArtistId { get; set; }
    public String Name { get; set; }
    public IList<Album> Albums = new List<Album>(0);
}
Artist lazyArtist = db.Artists.Get(50);
Console.WriteLine("Artist " + lazyArtist.Name);
foreach (var album in lazyArtist.Albums)//No elements lazy-fetched
	Console.WriteLine("Album " + album.Title);

-#################-
-- HandsOn EAGER --
-#################-

var eagerArtist = db.Artists.WithAlbums().Get(22);
Console.WriteLine("Artist " + eagerArtist.Name);

foreach (var album in eagerArtist.Albums)
    Console.WriteLine("Album " + album.Title);

-#################-
-- HandsOn LAZY JOINS --
-#################-

 var albums = db.Albums
 				.FindAllByGenreId(1)
    			.Select(db.Albums.Title, db.Albums.Genre.Name) //Chaining tables works if referential integrity is followed
    			.ToList();
-------------------
var albumDetails = db.Albums.FindAllByArtistId(50) //Remember, lazy loading so no casting possible
				            .Select(
				            	db.Albums.Title,
				                db.Albums.ArtistId,
				                db.Albums.Artist.Name)
				            .LeftJoin(db.Artists).On(ArtistId: db.Albums.ArtistId); //Explain the LeftJoin and On
foreach (var ad in albumDetails)
    Console.WriteLine("{0} (Id={1}): {2}", ad.Name, ad.ArtistId, ad.Title);

-#################-
-- HandsOn EAGER JOINS --
-#################-

public class Album
{
    public int AlbumId { get; set; }
    ...
    public Artist Artist { get; set; }
    public Artist BandInfo { get; set; }
}
Album dbjf = db.Albums.WithArtist().Get(386);
IList<Album> hjf = db.Albums.All().With(db.Albums.Artists.As("BandInfo")).ToList<Album>();
-------------------
