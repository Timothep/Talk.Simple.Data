FOR THE DEMOS
- Install MongoDB
	- Prepare a shortcut to start the server
	- Check that MONGOVUE works and add a shortcut
    - Start SQL Mgmt Studio and display Albums
	- Display the output window
    - Open the Simple.Data.First.Demo and try it out with mongo and sql

-#################-
--   First demo  --
-#################-

const string conStr = @"Data Source=.\SQLEXPRESS;Initial Catalog=MvcMusicStore;Integrated Security=True";
var db = Database.OpenConnection(conStr);

//const string connectionString = @"mongodb://localhost:27017/MvcMusicStore";
//dynamic db = Database.Opener.OpenMongo(connectionString);

var albums = db.albums.FindAllByArtistId(1);

foreach (var album in albums)
    Console.WriteLine(album.Title);

-#################-
-- Hands On C_UD --
-#################-

-----INSERT--------
 db.albums.Insert(Title: "AAA"); //GenreId NULL Exception
-------------------
db.albums.Insert(GenreId: 1, ArtistId: 1, Title: "AAA", Price: 9);
-------------------
internal class Album
{
    public Int32 GenreId { get; set; }
}
db.albums.Insert(new Album { GenreId = 1});
-------------------
internal class Album
{
    public Int32 GenreId { get; set; }
    public Int32 ArtistId { get; set; }
    public String Title { get; set; }
    public Int32 Price { get; set; }
}
db.albums.Insert(new Album { GenreId = 1, ArtistId = 1, Title = "AAA", Price = 9});
----UPDATE---------
db.albums.UpdateByAlbumId(AlbumId: 675, Title: "BBB");
-------------------
var album = db.albums.Get(675);
album.Title = "CCC";
db.albums.Update(album);
----DELETE---------
db.albums.DeleteByTitle("CCC");
-------------------
var album = db.Albums.Get(677);
db.Albums.Delete(album);

-#################-
-- Hands On _R__ --
-#################-

var albums = db.Albums.All(); //Show "Children Could not be evaluated" in debug mode
var albums = db.Albums.All().ToList();
-------------------
var album = db.Albums.Get(392); //Look for the TOP1 in the output window
-------------------
var album = db.Albums.Find(db.Albums.Title == "Master Of Puppets");
-------------------
var albums = db.Albums.FindAll(db.Albums.ArtistId == 50).ToList();
-------------------
var albums = db.Albums.FindAllByArtistId(50).ToList();

-#################-
-- Hands On CAST --
-#################-

Album album = db.albums.Get(392); //Works as is
-------------------
var albums = db.albums.FindAllByGenreId(1).ToList(); //Show the necessity to enumerate in the debugger
IList<Album> albums = db.albums.FindAllByGenreId(1).ToList(); // Exception, requires explicit cast
IList<Album> albums = db.albums.FindAllByGenreId(1).ToList<Album>(); //Deploy in debugger

-######################-
-- Hands On PRE JOINS --
-######################-

var artist = db.artists.Get(50);
foreach (var album in artist.Albums) //Where does Albums come from?
    Console.WriteLine(album.Title);  //Show the second SQL select in the output
-------------------
internal class Artist
{
    public Int32 ArtistId { get; set; }
    public String Name { get; set; }
    public IList<Album> Albums { get; set; }
}
Artist artist = db.Artists.Get(50);
foreach (var album in artist.Albums)//No elements lazy-fetched
	Console.WriteLine(album.Title);
-------------------
var artist = db.Artists.WithAlbums().Get(22);
foreach (var album in artist.Albums)//Elements are correctly lazy-fetched
    Console.WriteLine(album.Title);

-######################-
-- HandsOn POST JOINS --
-######################-

var albums = db.Albums
 				.FindAllByGenreId(1)
    			.Select(db.Albums.Title, db.Albums.Genre.Name) //Chaining tables eager loads
    			.ToList();
-------------------
IList<Album> albums = db.Albums
                .FindAllByGenreId(1)
                .Select(db.Albums.Title, db.Albums.Genre.Name) //Name is obviously not casted
                .ToList<Album>();
-------------------
internal class Album
{
    ...
    public string Name { get; set; } //Add a Name -> works
}
-------------------
internal class Album
{
    ...
    public string GenreName { get; set; }
}
IList<Album> albums = db.Albums
                .FindAllByGenreId(1)
                .Select(db.Albums.Title, db.Albums.Genre.Name.As("GenreName")) //Introduce AS
                .ToList<Album>();
-------------------
var albumsWith = db.Albums.All().WithArtists().ToList(); //Artists are joined as a dynamic sub-element
-------------------
//Display all the albums of a band, the band name and genre of the album (join on 3 tables)
var albums = db.Albums.FindAllByArtistId(50)
               .Select(
                   db.Albums.Artist.Name.As("ArtistName"),  //First Join
                   db.Albums.Title,
                   db.Albums.Genre.Name.As("GenreName")     //Second Join
                   )
               .LeftJoin(db.Artist).On(db.Artists.ArtistId == db.Albums.ArtistId)   //Join
               .LeftJoin(db.Genre).On(db.Genre.GenreId == db.Albums.GenreId)        //Join
               .ToList();
-------------------
-------------------
-------------------
var albumDetails = db.Albums.FindAllByArtistId(50)
				            .Select(
				            	db.Albums.Title,
				                db.Albums.ArtistId,
				                db.Albums.Artist.Name) //This alone would be ok if no casting is performed
				            .LeftJoin(db.Artists).On(ArtistId: db.Albums.ArtistId); //Explain the LeftJoin and On
foreach (var ad in albumDetails)
    Console.WriteLine("{0} (Id={1}): {2}", ad.Name, ad.ArtistId, ad.Title);

-#################-
-- HandsOn EAGER JOINS --
-#################-
??????????????????????????????????????? YES IT EAGER JOINS.... but WHAT THE FUCK IS THE DIFFERENTE WITH THE LAZY LOADING ABOVE ???????????????????????????????????????
public class Album
{
    public int AlbumId { get; set; }
    ...
    public Artist Artist { get; set; }
    public Artist BandInfo { get; set; }
}
Album dbjf = db.Albums.WithArtist().Get(386);
IList<Album> hjf = db.Albums.All().With(db.Albums.Artists.As("BandInfo")).ToList<Album>();
-------------------
